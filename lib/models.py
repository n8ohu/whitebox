from util.mvic import Model, Register, BitField

class CMX991(Model):
    template = 'cmx991'
    en_bias = BitField(17, 7, 'power_down', ('power_down', 'power_up'))
    ifh = BitField(17, 6, 'lt_75mhz', ('lt_75mhz', 'gt_75mhz'))
    chan_sel = BitField(17, 5, 'i_channel', ('i_channel', 'q_channel'))
    rx_out = BitField(17, 4, 'iq', ('iq', 'if'))
    vco_nr = BitField(17, (2, 3), 'mid_low_q', ('high_q', 'mid_high_q', 'mid_low_q', 'low_q'))
    vco_buf_en = BitField(17, 1, 'power_down', ('power_down', 'power_up'))
    vco_nr_en = BitField(17, 0, 'power_down', ('power_down', 'power_up'))
    general_control = Register(en_bias, ifh, chan_sel, rx_out, vco_nr, vco_buf_en, vco_nr_en)

    mix_pwr = BitField(18, 7, 'power_down', ('power_down', 'power_up'))
    iq_pwr = BitField(18, 6, 'power_down', ('power_down', 'power_up'))
    amp_pwr = BitField(18, 5, 'power_down', ('power_down', 'power_up'))
    sli_pwr = BitField(18, 4, 'power_down', ('power_down', 'power_up'))
    lna = BitField(18, 3, 'power_down', ('power_down', 'power_up'))
    div = BitField(18, (1, 2), 'by_2', ('by_2', 'by_1', 'by_4'))
    vbias = BitField(18, 0, 'power_down', ('power_down', 'power_up'))
    rx_control = Register(mix_pwr, iq_pwr, amp_pwr, sli_pwr, lna, div, vbias)

    if_in = BitField(19, 7, 'ifip1', ('ifip1', 'ifip2'))
    mix_out = BitField(19, 6, 'mixout1', ('mixout1', 'mixout2'))
    iq_filter = BitField(19, 5, 'bw_1mhz', ('bw_100khz', 'bw_1mhz'))
    cal_en = BitField(19, 4, 'disable', ('disable', 'enable'))
    vga = BitField(19, (0, 3), 'n0db', ('n0db', 'n6db', 'n12db', 'n18db', 'n24db', 'n30db', 'n36db', 'n42db', 'n48db'))
    rx_mode = Register(if_in, mix_out, iq_filter, cal_en, vga)

    tx_mix_pwr = BitField(20, 6, 'power_down', ('power_down', 'power_up'))
    iq_mod_pwr = BitField(20, 4, 'power_down', ('power_down', 'power_up'))
    freq = BitField(20, 1, 'lt_600mhz', ('lt_600mhz', 'gt_600mhz'))
    iq_out = BitField(20, 0, 'rfout', ('rfout', 'ifout'))
    tx_control = Register(tx_mix_pwr, iq_mod_pwr, freq, iq_out)

    if_filter = BitField(21, (4, 5), 'bw_45mhz', ('bw_45mhz', 'bw_60mhz', 'bw_90mhz', 'bw_120mhz'))
    hi_lo = BitField(21, 2, 'lower', ('lower', 'higher'))
    tx_rf_div = BitField(21,1, 'by_2', ('by_2', 'by_4'))
    tx_if_div = BitField(21,0, 'by_4', ('by_4', 'by_2'))
    tx_mode = Register(if_filter, hi_lo, tx_rf_div, tx_if_div)

    gain = BitField(22, (6, 7), 'p0db', ('p0db', 'n6db', 'p6db'))
    tx_gain = Register(gain)

    m_lsb = BitField(32, (0, 7))
    pll_m_0 = Register(m_lsb)
    pll = BitField(33, 7,  'disabled', ('disabled', 'enabled'))
    ld_synth = BitField(33, 6, 'unlocked', ('unlocked', 'locked'))
    charge_pump = BitField(33, 5, 'high_impedance', ('high_impedance', 'enable'))
    m_msb = BitField(33, (0, 4))
    pll_m_1 = Register(pll, ld_synth, charge_pump, m_msb)
    m = Register(m_lsb, m_msb)

    n_lsb = BitField(34, (0, 7))
    pll_n_0 = Register(n_lsb)
    n_msb = BitField(35, (0, 6))
    pll_n_1 = Register(n_msb)
    n = Register(n_lsb, n_msb)

class ADF4351(Model):
    template = 'adf4351'
    frac_12_bit = BitField(0, (3, 14), 0)
    int_16_bit = BitField(0, (15, 30), 0x23)
    address_0 = Register(frac_12_bit, int_16_bit)

    mod_12_bit = BitField(1, (3, 14), 0xfff)
    phase_12_bit = BitField(1,(15, 26))
    prescaler = BitField(1, 27, '4_5', ('4_5', '8_9'))
    phase_adjust = BitField(1, 28)
    address_1 = Register(mod_12_bit, phase_12_bit, prescaler, phase_adjust)

    counter_reset = BitField(2, 3, 'disabled', ('disabled', 'enabled'))
    cp_three_state = BitField(2, 4, 'disabled', ('disabled', 'enabled'))
    power_down = BitField(2, 5, 'disabled', ('disabled', 'enabled'))
    pd_polarity = BitField(2, 6, 'positive', ('negative', 'positive'))
    ldp = BitField(2, 7, '10ns', ('10ns', '6ns'))
    ldf = BitField(2, 8, 'frac_n', ('frac_n', 'int_n'))
    charge_pump_settings = map(lambda x: '_'.join(("%0.2fma"%(round(x*31.27 + 31.27)/100)).split('.')), range(0,16))
    charge_pump_current = BitField(2, (9, 12), 5, charge_pump_settings)
    double_buffer = BitField(2, 13, 'disabled', ('disabled', 'enabled'))
    r_counter_10_bit = BitField(2, (14, 23))
    reference_divide_by_2 = BitField(2, 24, 'disabled', ('disabled', 'enabled'))
    reference_doubler = BitField(2, 25, 'disabled', ('disabled', 'enabled'))
    muxout = BitField(2, (26, 28), 'dvdd', ('3state', 'dvdd', 'dgnd', 'rdiv', 'ndiv', 'analog_ld', 'dld', 'reserved'))
    low_noise_and_spur = BitField(2, (29, 30), 'low_spur', ('low_noise', 'reserved0', 'reserved1', 'low_spur'))
    address_2 = Register(counter_reset, cp_three_state, power_down, pd_polarity, ldp, ldf, charge_pump_current, double_buffer, r_counter_10_bit, reference_divide_by_2, reference_doubler, muxout, low_noise_and_spur)

    clock_divider_12_bit = BitField(3, (3, 14))
    clock_div_mode = BitField(3, (15, 16), 'fast_lock', ('clock_divider_off', 'fast_lock', 'resync_enable', 'reserved'))
    cycle_slip_reduction = BitField(3, 18, 'disabled', ('disabled', 'enabled'))
    charge_cancel = BitField(3, 21)
    anti_backlash_pulse = BitField(3, 22, '6ns', ('6ns', '3ns'))
    band_select_mode = BitField(3, 23, 'low', ('low', 'high'))
    address_3 = Register(clock_divider_12_bit, clock_div_mode, cycle_slip_reduction, charge_cancel, anti_backlash_pulse, band_select_mode)

    output_power = BitField(4, (3, 4), '5dbm', ('m4dbm', 'm1dbm', '2dbm', '5dbm'))
    rf_output_enable = BitField(4, 5, 'enabled', ('disabled', 'enabled'))
    aux_output_power = BitField(4, (6, 7), '5dbm', ('m4dbm', 'm1dbm', '2dbm', '5dbm'))
    aux_output_enable = BitField(4, 8, 'enabled', ('disabled', 'enabled'))
    aux_output_select = BitField(4, 9, 'fundamental', ('divided', 'fundamental'))
    mute_till_lock_detect = BitField(4, 10, 'mute_disabled', ('mute_disabled', 'mute_enabled'))
    vco_power_down = BitField(4, 11, 'vco_powered_up', ('vco_powered_up', 'vco_powered_down'))
    band_select_clock_div = BitField(4, (12, 19))
    rf_divider_select = BitField(4, (20, 22), 'div1', ('div1', 'div2', 'div4', 'div8', 'div16', 'div32', 'div64'))
    feedback_select = BitField(4, 23, 'fundamental', ('divided', 'fundamental'))
    address_4 = Register(output_power, rf_output_enable, aux_output_power, aux_output_enable, aux_output_select, mute_till_lock_detect, vco_power_down, band_select_clock_div, rf_divider_select, feedback_select)

    reserved_5_0 = BitField(5, (19, 20), 3)
    ld_pin_mode = BitField(5, (22, 23), 'dld', ('low0', 'dld', 'low', 'high'))
    address_5 = Register(reserved_5_0, ld_pin_mode)
